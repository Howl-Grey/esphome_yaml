esphome:
  name: downstairs_lightstrip

esp8266:
  board: nodemcuv2

wifi:
  ssid: !secret ssid
  password: !secret wappw

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Lightstrip Fallback Hotspot"
    password: !secret hotspotpw

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret apipw

ota:
  password: !secret apipw

number:
  - platform: template
    name: "Downstairs Lightstrip Speed"
    optimistic: true
    min_value: -5
    max_value: 5
    step: 1
    initial_value: 3
    id: downstairs_lightstrip_speed

### BEGIN GOOD STUFF ###

light:
  - platform: fastled_clockless
    chipset: WS2811
    pin: D5
    num_leds: 300
    rgb_order: GRB
    name: "Downstairs Lightstrip"
    effects:
      - random:
      - addressable_color_wipe:
          name: Lightstrip Color Wipe
          colors:
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 5
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 5
          add_led_interval: 100ms
          reverse: false
      - addressable_color_wipe:
          name: Lightstrip Color Wipe - Plaid!
          colors:
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 5
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 5
          add_led_interval: 25ms
          reverse: false
      - addressable_color_wipe:
          name: Xmas Chase
          colors:
            - red: 20%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 40%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 80%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 80%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 40%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 20%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 20%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 40%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 80%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 80%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 40%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 20%
              blue: 0%
              num_leds: 1
          add_led_interval: 100ms
          reverse: false
      - addressable_color_wipe:
          name: Xmas Chase 2
          colors:
            - red: 20%
              green: 80%
              blue: 0%
              num_leds: 2
            - red: 40%
              green: 60%
              blue: 0%
              num_leds: 2
            - red: 80%
              green: 20%
              blue: 0%
              num_leds: 2
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 80%
              green: 20%
              blue: 0%
              num_leds: 2
            - red: 60%
              green: 40%
              blue: 0%
              num_leds: 2
            - red: 40%
              green: 60%
              blue: 0%
              num_leds: 2
            - red: 20%
              green: 80%
              blue: 0%
              num_leds: 2
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 1
          add_led_interval: 75ms
          reverse: false
      - addressable_lambda:
          name: "Fireworks!"
          update_interval: 0ms
          lambda: |-
            // Static variables keep their value even when
            // stopping and starting the effect again

            // firework phase enum
            enum Phase { launch, explode, done };
            // Number of Fireworks possible at a time
            const uint8_t FIREWORK_COUNT = 6;
            // Firework explosion size
            const uint8_t EXPLOSION_SIZE = 5;
            // Seconds for explosion fade
            const uint8_t FADE_OUT_RATE = 2;
            // gravity accelleration in feet/s/s
            const float GRAVITY = 32.1741;
            // max height is max pixels minus 5
            const size_t MAX_HEIGHT = it.size() - EXPLOSION_SIZE;
            // min height is 2/3 the max pixels
            const size_t MIN_HEIGHT = (it.size() * 2) / 3;
            // Probability that a firework will launch
            const uint8_t LAUNCH_PROB = 2;

            // firework structure
            struct Firework {
              uint32_t launchTime;
              uint32_t explodeTime;
              Phase phase;
              Color color;
              size_t explodeLoc;
              float initAcc;
              size_t lastLoc;
              Firework() : phase{done} {}
            };

            struct FireworkContainer {
              uint8_t count = 0;
              Firework arr[FIREWORK_COUNT];
              FireworkContainer (int c = 0) {
                count = c;
              }
              Firework remove(uint8_t index) {
                Firework removed;

                if (index < count && index >= 0) {
                  removed = arr[index];
                  for (uint8_t i = index; i < count - 1; i++) {
                    arr[i] = arr[i+1];
                  };
                  count--;
                }

                return removed;
              }
              void add(Firework newFirework) {
                if (count < FIREWORK_COUNT) {
                  arr[count] = newFirework;
                  count ++;
                }
              }
              Firework& get(uint8_t i) {
                return arr[i];
              }
              void fill(uint8_t fillCount, Phase phase) {
                count = 0;
                for (uint8_t i = 0; i < fillCount && i < FIREWORK_COUNT; i++) {
                  Firework newFirework;
                  newFirework.phase = phase;
                  arr[i] = newFirework;
                  count ++;
                }
              }
            };

            // main Firework arrays
            static FireworkContainer doneFireworks;
            static FireworkContainer explodingFireworks;
            static FireworkContainer launchingFireworks;

            // normal variables lose their value after each
            // execution - basically after each update_interval
            uint32_t currentTime = millis();
            float seconds;
            // current firework accelleration
            float fireworkAccCur;
            size_t fireworkLoc;
            size_t height;
            Color currentFrame[it.size()];
            uint32_t timePassed;
            uint8_t fade;
            size_t end;
            size_t start;
            Color currentColor;
            Firework phaseChangedFirework;

            if (initial_run) {
              doneFireworks.fill(FIREWORK_COUNT, done);
              launchingFireworks.fill(0, launch);
              explodingFireworks.fill(0, explode);
              it.all() = Color::BLACK;
            }

            for (uint8_t i = 0; i < doneFireworks.count; i++) {
              if ((random_uint32() % 100) < LAUNCH_PROB) {
                phaseChangedFirework = doneFireworks.remove(i);
                i--;
                // determine random accelleration
                height = random_uint32() % (MAX_HEIGHT - MIN_HEIGHT) + MIN_HEIGHT;
                phaseChangedFirework.explodeLoc = it.size() - height;
                phaseChangedFirework.initAcc = 2 * sqrt(height * GRAVITY);
                phaseChangedFirework.color = Color::random_color();
                phaseChangedFirework.launchTime = millis();
                phaseChangedFirework.phase = launch;
                phaseChangedFirework.lastLoc = it.size();
                launchingFireworks.add(phaseChangedFirework);
              }              
            }

            for (uint8_t i = 0; i < launchingFireworks.count; i++) {
              seconds = (currentTime - launchingFireworks.get(i).launchTime) / (float) 1000;
              fireworkLoc = it.size() - lroundf((launchingFireworks.get(i).initAcc * seconds - GRAVITY * seconds * seconds));
              if (fireworkLoc <= launchingFireworks.get(i).explodeLoc) {
                phaseChangedFirework = launchingFireworks.remove(i);
                phaseChangedFirework.phase = explode;
                phaseChangedFirework.explodeTime = currentTime;
                explodingFireworks.add(phaseChangedFirework);
                i--;
              } else if (fireworkLoc != launchingFireworks.get(i).lastLoc) {
                it[launchingFireworks.get(i).lastLoc] = Color::BLACK;
                launchingFireworks.get(i).lastLoc = fireworkLoc;
              }
            }

            for (uint8_t i = 0; i < explodingFireworks.count; i++) {
              timePassed = currentTime - explodingFireworks.get(i).explodeTime;
              end = explodingFireworks.get(i).explodeLoc + EXPLOSION_SIZE;
              start = explodingFireworks.get(i).explodeLoc - EXPLOSION_SIZE;

              if (timePassed > (FADE_OUT_RATE * 1000)) {
                fade = 0;
              } else {                
                fade = 255 - (255 * timePassed / (FADE_OUT_RATE * 1000));
              }

              currentColor = explodingFireworks.get(i).color.fade_to_black(fade);

              for (size_t j = start; j <= end; j++) {
                  it[j] = currentColor;
              }
              
              if (timePassed > (FADE_OUT_RATE * 1000)) {
                phaseChangedFirework = explodingFireworks.remove(i);
                phaseChangedFirework.phase = done;
                doneFireworks.add(phaseChangedFirework);
                i--;
              }
            }

            for (uint8_t i = 0; i < launchingFireworks.count; i++) {
              it[launchingFireworks.get(i).lastLoc] = launchingFireworks.get(i).color;
            }
      - addressable_lambda:
          name: "Landing Lights"
          update_interval: 0ms
          lambda: |-
            // Static variables keep their value even when
            // stopping and starting the effect again

            // Base ms between updates
            const int BASE_SPEED = 3;
            // Speed of the landing lights
            const float LIGHTSTRIP_SPEED = id(downstairs_lightstrip_speed).state;
            // Lightstrip speed modifier
            const float SPEED_MODIFIER = 5.0 - abs(LIGHTSTRIP_SPEED);
            // Update interval BASE * 2 ^ SPEED
            const int UPDATE_INTERVAL = (int)(BASE_SPEED * pow(2.0, SPEED_MODIFIER));
            // Number of lights
            const int LIGHT_COUNT = 3;
            // Size of the halo around the landing light
            const int HALO_SIZE = 25;
            // Number of pixels
            const int PIXEL_COUNT = it.size();
            // ms it takes to change speed
            const int REBOUND_TIME = 1500;
            const bool IS_REVERSE = LIGHTSTRIP_SPEED < 0;
            // Landing light array
            static std::deque<int> landingLights;
            // last update time of the lights
            static uint32_t lastUpdateTime;
            // distance between lights
            static int lightDistance;
            // current update interval
            static int updateInterval;
            static bool isReverse;
            // Speed change in progress
            static bool isChangingSpeed;
            static float speedStart;
            static float speedChangeTotal;
            static float speedCurrent;
            static uint32_t speedChangeTime;

            // normal variables lose their value after each
            // execution - basically after each update_interval
            uint32_t currentTime = millis();
            uint32_t timePassed;
            
            if (initial_run) {
              int proposedDistance = (PIXEL_COUNT / LIGHT_COUNT) - (2*HALO_SIZE) - 1;
              lightDistance = proposedDistance < 1 ? 1 : proposedDistance;
              it.all() = Color::BLACK;
              lastUpdateTime = currentTime;
              updateInterval = 1000;
              speedCurrent = 0.0;
              isReverse = IS_REVERSE;
              landingLights.clear();
              isChangingSpeed = false;
              ESP_LOGD("LandingLights", "UPDATE_INTERVAL: %i", UPDATE_INTERVAL);
              ESP_LOGD("LandingLights",  "lightDistance: %i", lightDistance);
              ESP_LOGD("LandingLights",  "proposedDistance: %i", proposedDistance);
            }


            if (isChangingSpeed) {
              int speedTimePassed = currentTime - speedChangeTime;
              float speedChangePercent = (float)speedTimePassed / REBOUND_TIME;
              if (speedChangePercent >= 1) {
                isChangingSpeed = false;
                isReverse = IS_REVERSE;
                speedCurrent = LIGHTSTRIP_SPEED; 
                updateInterval = UPDATE_INTERVAL;
                
                ESP_LOGD("LandingLights",  "isChangingSpeed: %s", isChangingSpeed? "true":"false");
                ESP_LOGD("LandingLights",  "speedCurrent: %f", speedCurrent);
                ESP_LOGD("LandingLights",  "updateInterval: %i", updateInterval);
              } else {
                float speedChangeCurrent = speedChangePercent * speedChangeTotal;
                speedCurrent = speedStart + speedChangeCurrent;
                isReverse = speedCurrent < 0;
                updateInterval = (int) (BASE_SPEED * pow(2.0, (5.0 - abs(speedCurrent))));
              }
            } else if (speedCurrent != LIGHTSTRIP_SPEED || isReverse != IS_REVERSE) {
              isChangingSpeed = true;
              speedStart = speedCurrent;
              float speedEnd = LIGHTSTRIP_SPEED;
              speedChangeTotal = speedEnd - speedStart;
              speedChangeTime = currentTime;
              ESP_LOGD("LandingLights",  "isChangingSpeed: %s", isChangingSpeed? "true":"false");
              ESP_LOGD("LandingLights",  "speedStart: %f", speedStart);
              ESP_LOGD("LandingLights",  "speedEnd: %f", speedEnd);
              ESP_LOGD("LandingLights",  "speedChangeTotal: %f", speedChangeTotal);
            }

            timePassed = currentTime - lastUpdateTime;
            int framesPassed = timePassed / updateInterval;

            if (framesPassed > 0 || speedCurrent == 0) {
              lastUpdateTime = currentTime;
            } else {
              return;
            }
            it.all() = Color::BLACK;


            if (isReverse) {
              if (landingLights.empty()) {
                landingLights.push_back(PIXEL_COUNT + HALO_SIZE);
              } else if (landingLights.back() < (PIXEL_COUNT - HALO_SIZE - lightDistance)) {
                landingLights.push_back(landingLights.back() + 2*HALO_SIZE + lightDistance);
              }
              if (landingLights.front() < -HALO_SIZE) {
                landingLights.pop_front();
              }
            } else {
              if (landingLights.empty()) {
                landingLights.push_front(-HALO_SIZE);
              } else if (landingLights.front() > (HALO_SIZE + lightDistance)) {
                landingLights.push_front(landingLights.front() - 2*HALO_SIZE - lightDistance);
              }
              if (landingLights.back() > (PIXEL_COUNT + HALO_SIZE)) {
                landingLights.pop_back();
              }
            }
              
            std::for_each(
              landingLights.begin(),
              landingLights.end(),
              [&framesPassed,
               &PIXEL_COUNT,
               &it,
               &current_color](int &location
            ){
              location = isReverse ? location - framesPassed : location + framesPassed;

              if (location >= 0 && location < PIXEL_COUNT) {
                it[location] = current_color;
              }

              // for each halo pixel on either side of the landing light
              for (int32_t j = 0; j < HALO_SIZE; j++) {
                float fadePercent = (float)j / HALO_SIZE;
                uint8_t fade = 255 - (uint8)(255 * fadePercent);
                Color fadeColor = current_color.fade_to_black(fade);
                // halo on the bottom side of the landing light
                if ((location - j) >= 0 && (location - j) < PIXEL_COUNT) {
                  it[location - j] = fadeColor;
                }
                if ((location + j) >= 0 && (location + j) < PIXEL_COUNT) {
                  it[location + j] = fadeColor;
                }
              }
            });
status_led:
  pin:
    number: D4
    inverted: true

sensor:
  - platform: wifi_signal
    name: "Lightstrip Wifi"
    update_interval: 60s
