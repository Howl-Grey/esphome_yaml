esphome:
  name: downstairs_lightstrip

esp8266:
  board: nodemcuv2

wifi:
  ssid: !secret ssid
  password: !secret wappw

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Lightstrip Fallback Hotspot"
    password: !secret hotspotpw

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret apipw

ota:
  password: !secret apipw

### BEGIN GOOD STUFF ###

light:
  - platform: fastled_clockless
    chipset: WS2811
    pin: D5
    num_leds: 300
    rgb_order: GRB
    name: "Downstairs Lightstrip"
    effects:
      - random:
      - addressable_color_wipe:
          name: Lightstrip Color Wipe
          colors:
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 5
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 5
          add_led_interval: 100ms
          reverse: false
      - addressable_color_wipe:
          name: Lightstrip Color Wipe - Plaid!
          colors:
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 5
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 5
          add_led_interval: 25ms
          reverse: false
      - addressable_color_wipe:
          name: Xmas Chase
          colors:
            - red: 20%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 40%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 80%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 80%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 40%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 20%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 20%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 40%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 80%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 80%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 40%
              blue: 0%
              num_leds: 1
            - red: 0%
              green: 20%
              blue: 0%
              num_leds: 1
          add_led_interval: 100ms
          reverse: false
      - addressable_color_wipe:
          name: Xmas Chase 2
          colors:
            - red: 20%
              green: 80%
              blue: 0%
              num_leds: 2
            - red: 40%
              green: 60%
              blue: 0%
              num_leds: 2
            - red: 80%
              green: 20%
              blue: 0%
              num_leds: 2
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 1
            - red: 80%
              green: 20%
              blue: 0%
              num_leds: 2
            - red: 60%
              green: 40%
              blue: 0%
              num_leds: 2
            - red: 40%
              green: 60%
              blue: 0%
              num_leds: 2
            - red: 20%
              green: 80%
              blue: 0%
              num_leds: 2
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 1
          add_led_interval: 75ms
          reverse: false
      - addressable_lambda:
          name: "Fireworks!"
          update_interval: 0ms
          lambda: |-
            // Static variables keep their value even when
            // stopping and starting the effect again

            // firework phase enum
            enum Phase { launch, explode, done };
            // Number of Fireworks possible at a time
            const uint8_t FIREWORK_COUNT = 6;
            // Firework explosion size
            const uint8_t EXPLOSION_SIZE = 5;
            // Seconds for explosion fade
            const uint8_t FADE_OUT_RATE = 2;
            // gravity accelleration in feet/s/s
            const float GRAVITY = 32.1741;
            // max height is max pixels minus 5
            const size_t MAX_HEIGHT = it.size() - EXPLOSION_SIZE;
            // min height is 2/3 the max pixels
            const size_t MIN_HEIGHT = (it.size() * 2) / 3;
            // Probability that a firework will launch
            const uint8_t LAUNCH_PROB = 2;

            // firework structure
            struct Firework {
              uint32_t launchTime;
              uint32_t explodeTime;
              Phase phase;
              Color color;
              size_t explodeLoc;
              float initAcc;
              size_t lastLoc;
              Firework() : phase{done} {}
            };

            struct FireworkContainer {
              uint8_t count = 0;
              Firework arr[FIREWORK_COUNT];
              FireworkContainer (int c = 0) {
                count = c;
              }
              Firework remove(uint8_t index) {
                Firework removed;

                if (index < count && index >= 0) {
                  removed = arr[index];
                  for (uint8_t i = index; i < count - 1; i++) {
                    arr[i] = arr[i+1];
                  };
                  count--;
                }

                return removed;
              }
              void add(Firework newFirework) {
                if (count < FIREWORK_COUNT) {
                  arr[count] = newFirework;
                  count ++;
                }
              }
              Firework& get(uint8_t i) {
                return arr[i];
              }
              void fill(uint8_t fillCount, Phase phase) {
                count = 0;
                for (uint8_t i = 0; i < fillCount && i < FIREWORK_COUNT; i++) {
                  Firework newFirework;
                  newFirework.phase = phase;
                  arr[i] = newFirework;
                  count ++;
                }
              }
            };

            // main Firework arrays
            static FireworkContainer doneFireworks;
            static FireworkContainer explodingFireworks;
            static FireworkContainer launchingFireworks;

            // normal variables lose their value after each
            // execution - basically after each update_interval
            uint32_t currentTime = millis();
            float seconds;
            // current firework accelleration
            float fireworkAccCur;
            size_t fireworkLoc;
            size_t height;
            Color currentFrame[it.size()];
            uint32_t timePassed;
            uint8_t fade;
            size_t end;
            size_t start;
            Color currentColor;
            Firework phaseChangedFirework;

            if (initial_run) {
              doneFireworks.fill(FIREWORK_COUNT, done);
              it.all() = Color::BLACK;
            }

            for (uint8_t i = 0; i < doneFireworks.count; i++) {
              if ((random_uint32() % 100) < LAUNCH_PROB) {
                phaseChangedFirework = doneFireworks.remove(i);
                i--;
                // determine random accelleration
                height = random_uint32() % (MAX_HEIGHT - MIN_HEIGHT) + MIN_HEIGHT;
                phaseChangedFirework.explodeLoc = it.size() - height;
                phaseChangedFirework.initAcc = 2 * sqrt(height * GRAVITY);
                phaseChangedFirework.color = Color::random_color();
                phaseChangedFirework.launchTime = millis();
                phaseChangedFirework.phase = launch;
                phaseChangedFirework.lastLoc = it.size();
                launchingFireworks.add(phaseChangedFirework);
              }              
            }

            for (uint8_t i = 0; i < launchingFireworks.count; i++) {
              seconds = (currentTime - launchingFireworks.get(i).launchTime) / (float) 1000;
              fireworkLoc = it.size() - lroundf((launchingFireworks.get(i).initAcc * seconds - GRAVITY * seconds * seconds));
              if (fireworkLoc <= launchingFireworks.get(i).explodeLoc) {
                phaseChangedFirework = launchingFireworks.remove(i);
                phaseChangedFirework.phase = explode;
                phaseChangedFirework.explodeTime = currentTime;
                explodingFireworks.add(phaseChangedFirework);
                i--;
              } else if (fireworkLoc != launchingFireworks.get(i).lastLoc) {
                it[launchingFireworks.get(i).lastLoc] = Color::BLACK;
                launchingFireworks.get(i).lastLoc = fireworkLoc;
              }
            }

            for (uint8_t i = 0; i < explodingFireworks.count; i++) {
              timePassed = currentTime - explodingFireworks.get(i).explodeTime;
              end = explodingFireworks.get(i).explodeLoc + EXPLOSION_SIZE;
              start = explodingFireworks.get(i).explodeLoc - EXPLOSION_SIZE;

              if (timePassed > (FADE_OUT_RATE * 1000)) {
                fade = 0;
              } else {                
                fade = 255 - (255 * timePassed / (FADE_OUT_RATE * 1000));
              }

              currentColor = explodingFireworks.get(i).color.fade_to_black(fade);

              for (size_t j = start; j <= end; j++) {
                  it[j] = currentColor;
              }
              
              if (timePassed > (FADE_OUT_RATE * 1000)) {
                phaseChangedFirework = explodingFireworks.remove(i);
                phaseChangedFirework.phase = done;
                doneFireworks.add(phaseChangedFirework);
                i--;
              }
            }

            for (uint8_t i = 0; i < launchingFireworks.count; i++) {
              it[launchingFireworks.get(i).lastLoc] = launchingFireworks.get(i).color;
            }
status_led:
  pin:
    number: D4
    inverted: true

sensor:
  - platform: wifi_signal
    name: "Lightstrip Wifi"
    update_interval: 60s
